# Define best lambda after regularization
BEST_LAMBDA <- lambdas[which.min(rmses)]
?df.pivot
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
dataset_to_matrix <- function(dataset) {
dataset %>% select(user_number, movie_number, rating) %>% data.matrix()
}
dataset_to_matrix(edx_small)
?data.matrix
?matrix
?apply
?mapply(, ...)
edx_small[1]
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
dataset_to_matrix(edx_small)
dataset_to_matrix <- function(dataset) {
data_matrix <- matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
sapply(dataset, function(row) {
data_matrix[row$user_number, row$movie_number] <- row$rating
})
dataset %>%
select(user_number, movie_number, rating) %>%
data.matrix()
}
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
dataset_to_matrix(edx_small)
dataset_to_matrix <- function(dataset) {
data_matrix <- matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
sapply(dataset, function(row) {
data_matrix[dataset[row]$user_number, dataset[row]$movie_number] <- dataset[row]$rating
})
dataset %>%
select(user_number, movie_number, rating) %>%
data.matrix()
}
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
dataset_to_matrix(edx_small)
dataset_to_matrix <- function(dataset) {
data_matrix <- matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
sapply(dataset, function(row) {
print(row)
})
dataset %>%
select(user_number, movie_number, rating) %>%
data.matrix()
}
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
dataset_to_matrix(edx_small)
dataset_to_matrix <- function(dataset) {
data_matrix <- matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
sapply(dataset, function(row) {
print(row)
})
}
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
dataset_to_matrix(edx_small)
dataset_to_matrix <- function(dataset) {
data_matrix <- matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
sapply(dataset, function(row) {
print(row$user_number)
})
}
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
dataset_to_matrix(edx_small)
dataset_to_matrix <- function(dataset) {
data_matrix <- matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
sapply(dataset, function(row) {
print(row['user_number'])
})
}
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
dataset_to_matrix(edx_small)
dataset_to_matrix <- function(dataset) {
data_matrix <- matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
sapply(dataset, function(row) {
print(row[['user_number']])
})
}
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
dataset_to_matrix(edx_small)
dataset_to_matrix <- function(dataset) {
data_matrix <- matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
sapply(dataset, function(row) {
print(dataset[row])
})
}
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
dataset_to_matrix(edx_small)
dataset_to_matrix <- function(dataset) {
sapply(dataset, function(row) {
print(dataset[row])
})
matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
}
dataset_to_matrix <- function(dataset) {
sapply(dataset, function(row) {
print(dataset[row])
})
matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
}
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
dataset_to_matrix(edx_small)
dataset_to_matrix <- function(dataset) {
sapply(dataset, function(row) {
print(dataset[1])
})
matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
}
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
dataset_to_matrix(edx_small)
dataset_to_matrix <- function(dataset) {
sapply(dataset, function(row) {
print(dataset[[1]])
})
matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
}
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
dataset_to_matrix(edx_small)
edx_small[1]
edx_small[,1]
edx_small[1,]
edx_small[1]
edx_small[1]$user_number
dataset_to_matrix <- function(dataset) {
data_matrix <- matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
sapply(1:nrow(dataset), function(row) {
data_matrix[dataset[row]$user_number, dataset[row]$movie_number] <- dataset[row]$rating
})
data_matrix
}
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
dataset_to_matrix(edx_small)
data_matrix <- matrix(data = 0,nrow = max(edx_small$user_number), ncol = max(edx_small$movie_number))
data_matrix <- matrix(data = 0,nrow = max(edx_small$user_number), ncol = max(edx_small$movie_number))
data_matrix[edx_small[1]$user_number, edx_small[1]$movie_number] <- edx_small[1]$rating
data_matrix[1,122]
data_matrix[1,121]
data_matrix <- dataset_to_matrix(edx_small)
data_matrix[1,121]
data_matrix
data_matrix[1:3,1:10]
data_matrix[1:3,120:130]
nrow(edx_small)
dataset_to_matrix <- function(dataset) {
data_matrix <- matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
sapply(1:nrow(dataset), function(row) {
print(row)
data_matrix[dataset[row]$user_number, dataset[row]$movie_number] <- dataset[row]$rating
})
data_matrix
}
nrow(edx_small)
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
data_matrix <- dataset_to_matrix(edx_small)
data_matrix[1:3,120:130]
dataset_to_matrix <- function(dataset) {
data_matrix <- matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
sapply(1:nrow(dataset), function(row) {
print(dataset[row]$user_number)
data_matrix[dataset[row]$user_number, dataset[row]$movie_number] <- dataset[row]$rating
})
data_matrix
}
nrow(edx_small)
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
data_matrix <- dataset_to_matrix(edx_small)
data_matrix[1:3,120:130]
dataset_to_matrix <- function(dataset) {
data_matrix <- matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
sapply(1:nrow(dataset), function(row) {
print(dataset[row]$user_number)
data_matrix[dataset[row]$user_number, dataset[row]$movie_number] <- dataset[row]$rating
data_matrix[dataset[row]$user_number, dataset[row]$movie_number]
})
data_matrix
}
nrow(edx_small)
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
data_matrix <- dataset_to_matrix(edx_small)
data_matrix[1:3,120:130]
dataset_to_matrix <- function(dataset) {
data_matrix <- matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
sapply(1:nrow(dataset), function(row) {
print(dataset[row]$user_number)
data_matrix[dataset[row]$user_number, dataset[row]$movie_number] <- dataset[row]$rating
print(data_matrix[dataset[row]$user_number, dataset[row]$movie_number])
})
data_matrix
}
nrow(edx_small)
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
data_matrix <- dataset_to_matrix(edx_small)
data_matrix[1:3,120:130]
dataset_to_matrix <- function(dataset) {
data_matrix <- matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
replicate(1:nrow(dataset), function(row) {
print(dataset[row]$user_number)
data_matrix[dataset[row]$user_number, dataset[row]$movie_number] <- dataset[row]$rating
print(data_matrix[dataset[row]$user_number, dataset[row]$movie_number])
})
data_matrix
}
nrow(edx_small)
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
data_matrix <- dataset_to_matrix(edx_small)
data_matrix[1:3,120:130]
dataset_to_matrix <- function(dataset) {
data_matrix <- matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
for (row in 1:nrow(dataset)) {
data_matrix[dataset[row]$user_number, dataset[row]$movie_number] <- dataset[row]$rating
}
data_matrix
}
nrow(edx_small)
edx_small <- edx_train_with_numbers %>% filter(user_number %in% 1:3)
data_matrix <- dataset_to_matrix(edx_small)
data_matrix[1:3,120:130]
data_matrix[1,121]
data_matrix <- dataset_to_matrix(edx)
if(!require(bigmemory)) install.packages("bigmemory", repos = "http://cran.us.r-project.org")
library(bigmemory)
dataset_to_matrix <- function(dataset) {
data_matrix <- big.matrix(data = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
for (row in 1:nrow(dataset)) {
data_matrix[dataset[row]$user_number, dataset[row]$movie_number] <- dataset[row]$rating
}
data_matrix
}
data_matrix <- dataset_to_matrix(edx)
?big.matrix
dataset_to_matrix <- function(dataset) {
data_matrix <- big.matrix(init = 0,nrow = max(dataset$user_number), ncol = max(dataset$movie_number))
for (row in 1:nrow(dataset)) {
data_matrix[dataset[row]$user_number, dataset[row]$movie_number] <- dataset[row]$rating
}
data_matrix
}
data_matrix <- dataset_to_matrix(edx)
dataset_to_matrix <- function(dataset) {
data_matrix <- big.matrix(nrow = max(dataset$user_number), ncol = max(dataset$movie_number), init = 0)
for (row in 1:nrow(dataset)) {
data_matrix[dataset[row]$user_number, dataset[row]$movie_number] <- dataset[row]$rating
}
data_matrix
}
data_matrix <- dataset_to_matrix(edx)
dataset_to_matrix <- function(dataset) {
data_matrix <- big.matrix(nrow = max(dataset$user_number), ncol = max(dataset$movie_number), init = 0)
for (row in 1:nrow(dataset)) {
data_matrix[dataset[row]$user_number, dataset[row]$movie_number] <- dataset[row]$rating
}
data_matrix
}
data_matrix <- dataset_to_matrix(edx_train_with_numbers)
dataset_to_matrix <- function(dataset) {
data_matrix <- big.matrix(nrow = max(dataset$user_number), ncol = max(dataset$movie_number), init = 0, backingfile = 'data_matrix_train.txt', backingpath = './')
for (row in 1:nrow(dataset)) {
print(row/nrow(dataset))
data_matrix[dataset[row]$user_number, dataset[row]$movie_number] <- dataset[row]$rating
}
data_matrix
}
data_matrix <- dataset_to_matrix(edx_train_with_numbers)
dataset_to_matrix <- function(dataset) {
data_matrix <- big.matrix(nrow = max(dataset$user_number), ncol = max(dataset$movie_number), init = 0)
for (row in 1:nrow(dataset)) {
print(row/nrow(dataset))
data_matrix[dataset[row]$user_number, dataset[row]$movie_number] <- dataset[row]$rating
}
data_matrix
}
data_matrix <- dataset_to_matrix(edx_train_with_numbers)
dataset_to_matrix <- function(dataset) {
data_matrix <- big.matrix(nrow = max(dataset$user_number), ncol = max(dataset$movie_number), init = 0)
lapply(dataset, function(row) {
print(row)
})
data_matrix
}
data_matrix <- dataset_to_matrix(edx_small)
dataset_to_matrix <- function(dataset) {
data_matrix <- big.matrix(nrow = max(dataset$user_number), ncol = max(dataset$movie_number), init = 0)
for (row in 1:nrow(dataset)) {
print(row/nrow(dataset))
data_matrix[dataset[row]$user_number, dataset[row]$movie_number] <- dataset[row]$rating
}
data_matrix
}
data_matrix <- dataset_to_matrix(edx_train_with_numbers)
set_rating_to_matrix <- function(data_row, dataset, matrix) {
print(1/nrow(dataset))
matrix[dataset[data_row]$user_number, dataset[data_row]$movie_number] <- dataset[data_row]$rating
}
dataset_to_matrix <- function(dataset) {
data_matrix <- big.matrix(nrow = max(dataset$user_number), ncol = max(dataset$movie_number), init = 0)
lapply(1:nrow(dataset), set_rating_to_matrix, dataset = dataset, matrix = data_matrix)
data_matrix
}
data_matrix <- dataset_to_matrix(edx_small)
data_matrix[1,121]
set_rating_to_matrix <- function(data_row, dataset, matrix) {
print(1/nrow(dataset))
matrix[dataset[data_row]$user_number, dataset[data_row]$movie_number] <- dataset[data_row]$rating
}
dataset_to_matrix <- function(dataset) {
data_matrix <- big.matrix(nrow = max(dataset$user_number), ncol = max(dataset$movie_number), init = 0)
lapply(1:nrow(dataset), set_rating_to_matrix, dataset = dataset, matrix = data_matrix)
data_matrix
}
data_matrix <- dataset_to_matrix(edx_train_with_numbers)
set_rating_to_matrix <- function(data_row, dataset, matrix) {
print(data_row/nrow(dataset))
matrix[dataset[data_row]$user_number, dataset[data_row]$movie_number] <- dataset[data_row]$rating
}
dataset_to_matrix <- function(dataset) {
data_matrix <- big.matrix(nrow = max(dataset$user_number), ncol = max(dataset$movie_number), init = 0)
lapply(1:nrow(dataset), set_rating_to_matrix, dataset = dataset, matrix = data_matrix)
data_matrix
}
data_matrix <- dataset_to_matrix(edx_train_with_numbers)
rm(data_matrix)
rm(edx_small)
write.csv(matrix(data = c(1,2,3), nrow = 3, ncol = 3), file = 'data.csv')
matrix <- c(1,2,3), nrow = 3, ncol = 3)
write.csv(matrix(matrix, file = 'data.csv')
mat <- matrix(data = c(1,2,3), nrow = 3, ncol = 3)
write.csv(mat, file = 'data.csv')
matr <- matrix(data = c(1,2,3), nrow = 3, ncol = 3)
write.csv(matr, file = 'data.csv')
matr
read.csv('data.csv')
write.csv(matr, file = 'data.csv', row.names = F)
read.csv('data.csv')
as.matrix(read.csv('data.csv'))
write.csv(matr, file = 'data.csv', row.names = F, col.names = F)
as.matrix(read.csv('data.csv'))
?write.csv
write.csv(matr, file = 'data.csv', row.names = F, col.names = F)
write.csv(matr, file = 'data1.csv', row.names = F, col.names = F)
?write.csv
write.csv(matr, file = 'data1.csv', row.names = F, col.names = NA)
write.table(matr, file = 'data.csv', row.names = F, col.names = F)
as.matrix(read.csv('data.csv'))
read.csv('data.csv')
read.table('data.csv')
read.table('data.csv', col.names = F, row.names = F)
read.table('data.csv')
read.csv('data.csv')
as.matrix(read.csv('data.csv'))
write.table(matr, file = 'data.csv', row.names = F, col.names = F)
as.matrix(read.csv('data.csv'))
write.table(matr, file = 'data', row.names = F, col.names = F)
read.table('data')
as.matrix(read.table('data'))
as.matrix(read.table('data'))[1:1]
as.matrix(read.table('data'))[1:3]
as.matrix(read.table('data'))[1:3,3]
as.matrix(read.table('data'))[13,3]
as.matrix(read.table('data'))[3,3]
max(edx$userId)
max(edx$movieId)
max(validation$movieId)
max(validation$userId)
length(validation$userId)
length(distinct(validation$userId))
read.table('data2')
require('data3')
#
edx_with_numbers <- setArrangedNumberToUsersAndMovies(edx)
validation_with_numbers <- applyUsersAndMoviesNumberFromOneDatasetToAnother(edx_with_numbers, validation)
rm(matr)
if (file.exists('data_incomplete')) {
data_matrix <- read.table('data_incomplete')
} else {
data_matrix <- dataset_to_matrix(edx_with_numbers)
write.table(matr, file = 'data_incomplete', row.names = F, col.names = F)
}
sum(is.na(validation_with_numbers$user_number))
sum(is.na(validation_with_numbers$movie_number))
if (file.exists('data_incomplete')) {
data_matrix <- read.table('data_incomplete')
} else {
data_matrix <- dataset_to_matrix(edx_with_numbers)
write.table(matr, file = 'data_incomplete', row.names = F, col.names = F)
}
write.big.matrix(data_matrix, file = 'data_incomplete', row.names = F, col.names = F)
if (file.exists('data_incomplete')) {
data_matrix <- read.big.matrix('data_incomplete')
} else {
data_matrix <- dataset_to_matrix(edx_with_numbers)
write.big.matrix(data_matrix, file = 'data_incomplete', row.names = F, col.names = F)
}
data_matrix[1,121]
nrow(data_matrix)
ncol(data_matrix)
data_matrix[1:10,1:10]
lapply(1:nrow(edx_validation_with_numbers), set_zeros, dataset = dataset, matrix = data_matrix)
set_zeros <- function(data_row, dataset, matrix) {
print(data_row/nrow(dataset))
matrix[dataset[data_row]$user_number, dataset[data_row]$movie_number] <- 0
}
lapply(1:nrow(edx_validation_with_numbers), set_zeros, dataset = dataset, matrix = data_matrix)
lapply(1:nrow(edx_validation_with_numbers), set_zeros, dataset = edx_validation_with_numbers, matrix = data_matrix)
data_matrix[1:314]
data_matrix[1,314]
lapply(1:nrow(edx_validation_with_numbers), set_zeros, dataset = edx_validation_with_numbers, matrix = data_matrix)
write.big.matrix(data_matrix, file = 'data_regul_incomplete', row.names = F, col.names = F)
mixture <- init_mixture(data_matrix, 10)
EXTRA_SMALL <- 1e-16
# Initialise Gaussian mixture
# with given matrix of ratings and number of clusters
init_mixture <- function(user_movie_matrix, clusters) {
user_amount <- nrow(user_movie_matrix)
# Initial probabilities
probs <- rep(1/clusters, clusters)
# Initial means
mu <- user_movie_matrix[sample(1:user_amount, clusters, replace = F)]
# Initial deviation
var <- sapply(1:clusters, function (cluster) {
mean(sweep(user_movie_matrix, 2, mu[cluster]) ** 2)
})
# Returning initial Gaussian mixture
data.table(mu, var, probs)
}
mixture <- init_mixture(data_matrix, 10)
EXTRA_SMALL <- 1e-16
# Initialise Gaussian mixture
# with given matrix of ratings and number of clusters
init_mixture <- function(user_movie_matrix, clusters) {
user_amount <- nrow(user_movie_matrix)
# Initial probabilities
probs <- rep(1/clusters, clusters)
# Initial means
mu <- user_movie_matrix[sample(1:user_amount, clusters, replace = F)]
print('--------')
# Initial deviation
var <- sapply(1:clusters, function (cluster) {
mean(sweep(user_movie_matrix, 2, mu[cluster]) ** 2)
})
# Returning initial Gaussian mixture
data.table(mu, var, probs)
}
mixture <- init_mixture(data_matrix, 10)
EXTRA_SMALL <- 1e-16
# Initialise Gaussian mixture
# with given matrix of ratings and number of clusters
init_mixture <- function(user_movie_matrix, clusters) {
user_amount <- nrow(user_movie_matrix)
# Initial probabilities
probs <- rep(1/clusters, clusters)
# Initial means
mu <- user_movie_matrix[sample(1:user_amount, clusters, replace = F)]
# Initial deviation
var <- sapply(1:clusters, function (cluster) {
mean(sweep(user_movie_matrix, 2, mu[cluster]) ** 2)
})
print('--------')
# Returning initial Gaussian mixture
data.table(mu, var, probs)
}
mixture <- init_mixture(data_matrix, 10)
# Initialise Gaussian mixture
# with given matrix of ratings and number of clusters
init_mixture <- function(user_movie_matrix, clusters) {
user_amount <- nrow(user_movie_matrix)
# Initial probabilities
probs <- rep(1/clusters, clusters)
# Initial means
mu <- user_movie_matrix[sample(1:user_amount, clusters, replace = F)]
# Initial deviation
var <- sapply(1:clusters, function (cluster) {
print(cluster)
mean(sweep(user_movie_matrix, 2, mu[cluster]) ** 2)
})
# Returning initial Gaussian mixture
data.table(mu, var, probs)
}
mixture <- init_mixture(data_matrix, 10)
EXTRA_SMALL <- 1e-16
# Initialise Gaussian mixture
# with given matrix of ratings and number of clusters
init_mixture <- function(user_movie_matrix, clusters) {
user_amount <- nrow(user_movie_matrix)
# Initial probabilities
probs <- rep(1/clusters, clusters)
# Initial means
mu <- user_movie_matrix[sample(1:user_amount, clusters, replace = F)]
# Initial deviation
var <- sapply(1:clusters, function (cluster) {
print(cluster)
mean(sweep(user_movie_matrix, 2, mu[cluster]))
})
# Returning initial Gaussian mixture
data.table(mu, var, probs)
}
mixture <- init_mixture(data_matrix, 10)
# Initialise Gaussian mixture
# with given matrix of ratings and number of clusters
init_mixture <- function(user_movie_matrix, clusters) {
user_amount <- nrow(user_movie_matrix)
# Initial probabilities
probs <- rep(1/clusters, clusters)
# Initial means
mu <- user_movie_matrix[sample(1:user_amount, clusters, replace = F)]
# Initial deviation
var <- sapply(1:clusters, function (cluster) {
print(cluster)
mean(sweep(user_movie_matrix, 2, mu[cluster]) ** 2)
})
# Returning initial Gaussian mixture
data.table(mu, var, probs)
}
